// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id          String     @id @default(uuid())
  name        String
  email       String     @unique
  password    String
  phoneNumber String?    @unique
  dob         DateTime
  gender      genderType
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  User        User?
}

model User {
  id                          String                        @id @default(uuid())
  auth                        Auth                          @relation(fields: [authId], references: [id])
  authId                      String                        @unique
  bio                         String?
  nickname                    String?
  ProfileInformationBasic     ProfileInformationBasic?
  ProfileInformationEducation ProfileInformationEducation[]
  ProfileInformationJobs      ProfileInformationJobs[]
  ProfileInformationBooks     ProfileInformationBooks[]
  ProfileInformationMovies    ProfileInformationMovies[]
  ProfileInformationMusic     ProfileInformationMusic[]
  Post                        Post[]
  PostReactions               PostReactions[]
  Comment                     Comment[]
  commentReactions            commentReactions[]
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  Story                       Story[]
  FriendOf                    Friends[]                     @relation("userId1")
  Friends                     Friends[]                     @relation("userId2")
  BlockedBy                   BlockList[]                   @relation("isBlockedBy")
  isBlocked                   BlockList?                    @relation("isBlocked")
  Share                       Share?
  profilePicture              profilePicture[]
  coverPhoto                  coverPhoto[]
  friendRequestPrivacy        friendRequestPrivacy          @default(PUBLIC)
  friendsExceptUserId         friendsExcept[]               @relation("userId")
  friendsExceptFriendsId      friendsExcept[]               @relation("friendsId")
}

model ProfileInformationBasic {
  id                 String        @id @default(uuid())
  user               User          @relation(fields: [userId], references: [id])
  userId             String        @unique
  gender             genderType?
  genderPrivacy      privacy       @default(PUBLIC)
  relationshipStatus relationship?
  relationPrivacy    privacy       @default(PUBLIC)
  dob                DateTime
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

model ProfileInformationEducation {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  degreeName  String?
  institution String?
  startedAt   DateTime?
  endedAt     DateTime?
  setPrivacy  privacy   @default(PUBLIC)
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ProfileInformationJobs {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  designation String
  company     String
  startedAt   DateTime
  endedAt     DateTime
  setPrivacy  privacy
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProfileInformationBooks {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  bookName  String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProfileInformationMovies {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
  movieName  String?
  tvShowName String?
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ProfileInformationMusic {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  music     String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id            String          @id @default(uuid())
  user          User            @relation(fields: [userId], references: [id])
  userId        String
  content       String?
  media         String[]        @default([])
  privacy       privacy         @default(PUBLIC)
  checkIn       String?
  lifeEvent     String?
  PostReactions PostReactions[]
  Comment       Comment[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  SharedBy      Share[]
  isDeleted     Boolean         @default(false)
  isTaggedPost  Boolean         @default(false)
  isTaggedBy    String          @default("")
  taggedPostId  String          @default("")
  postType      postType        @default(OWN)
}

model PostReactions {
  id        String       @id @default(uuid())
  user      User         @relation(fields: [reactedBy], references: [id])
  reactedBy String       @unique
  post      Post         @relation(fields: [postId], references: [id])
  // postedBy  String       @unique
  type      reactionType
  postId    String
  isDeleted Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Comment {
  id               String             @id @default(uuid())
  user             User               @relation(fields: [commentBy], references: [id])
  commentBy        String             @unique
  post             Post               @relation(fields: [postId], references: [id])
  postId           String             @unique
  content          String
  parentCommentId  String?
  commentReactions commentReactions[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model commentReactions {
  id           String       @id @default(uuid())
  user         User         @relation(fields: [reactedBy], references: [id])
  reactedBy    String       @unique
  comment      Comment      @relation(fields: [commentId], references: [id])
  commentId    String       @unique
  reactionType reactionType
  isDeleted    Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Story {
  id       String  @id @default(uuid())
  user     User    @relation(fields: [postedBy], references: [id])
  postedBy String  @unique
  content  String?
  media    String?
  privacy  privacy
}

model Friends {
  id              String  @id @default(uuid())
  friendOf        User    @relation("userId1", fields: [userId1], references: [id])
  userId1         String
  friend          User    @relation("userId2", fields: [userId2], references: [id])
  userId2         String
  requestAccepted Boolean @default(false)
  hasSent         Boolean @default(false)
  isCancelled     Boolean @default(false)
  removedFromList Boolean @default(false)
}

model BlockList {
  id          String @id @default(uuid())
  blockedById User   @relation("isBlockedBy", fields: [isBlockedBy], references: [id])
  isBlockedBy String
  blockedId   User   @relation("isBlocked", fields: [isBlocked], references: [id])
  isBlocked   String @unique
}

model Notification {
  id        String   @id @default(uuid())
  content   String
  isRead    Boolean  @default(false)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Share {
  id         String @id @default(uuid())
  post       Post   @relation(fields: [postId], references: [id])
  postId     String @unique
  sharedUser User   @relation(fields: [sharedBy], references: [id])
  sharedBy   String @unique
}

model profilePicture {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
  privacy   privacy @default(PUBLIC)
  image     String
  content   String
  postId    String  @unique
  isDeleted Boolean @default(false)
}

model coverPhoto {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  privacy   privacy @default(PUBLIC)
  image     String
  content   String
  postId    String  @unique
  isDeleted Boolean @default(false)
}

model friendsExcept {
  id        String  @id @default(uuid())
  user      User    @relation("userId", fields: [userId], references: [id])
  userId    String
  friends   User    @relation("friendsId", fields: [friendsId], references: [id])
  friendsId String
  isdeleted Boolean @default(false)

  @@unique([userId, friendsId])
}

enum genderType {
  MALE
  FEMALE
  OTHERS
}

enum relationship {
  SINGLE
  IN_A_RELATIONSHIP
  MARRIED
  WIDOWED
  ITS_COMPLICATED
}

enum privacy {
  PUBLIC
  FRIENDS_OF_FRIENDS
  CUSTOM
  FRIENDS
  ONLY_ME
  FRIENDS_EXCEPT
}

enum reactionType {
  LIKE
  LOVE
  HAHA
  WOW
  CARE
  ANGRY
  SAD
}

enum postType {
  OWN
  TAGGED
  PROFILEPICTURE
  COVERPHOTO
}

enum friendRequestPrivacy {
  PUBLIC
  FRIENDS_OF_FRIENDS
}
